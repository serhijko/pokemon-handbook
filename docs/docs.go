// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/pokemons": {
            "get": {
                "description": "Get all pokemons from the MongoDB. Pass values in json format.",
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves all pokemons from the MongoDB",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pokemons.pokemon"
                            }
                        }
                    },
                    "400": {
                        "description": "object can't be parsed into JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Post a pokemon to the MongoDB. If the database doesn't exist, create and insert a new value. Pass values in json format.",
                "produces": [
                    "application/json"
                ],
                "summary": "Post pokemon to the MongoDB",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pokemons.pokemon"
                        }
                    },
                    "400": {
                        "description": "object can't be parsed into JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "a pokemon with such id already exists",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete all existing pokemons in the MongoDB and gives a message \"all pokemons are deleted\". Pass values in json format. If there aren't pokemons in the database gives a message \"pokemons not found\".",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete all pokemons in the MongoDB",
                "responses": {
                    "200": {
                        "description": "all pokemons was deleted",
                        "schema": {
                            "$ref": "#/definitions/pokemons.pokemon"
                        }
                    },
                    "404": {
                        "description": "pokemons not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/pokemons/{id}": {
            "get": {
                "description": "Get a pokemon from the MongoDB by ID. Pass values in json format. If there aren't any pokemon with the ID gives a message \"pokemon not found\".",
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve pokemon from the MongoDB based on given ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pokemons.pokemon"
                        }
                    },
                    "404": {
                        "description": "pokemon not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "406": {
                        "description": "must be a number",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing pokemon in the MongoDB by ID. Pass values in json format. If there isn't pokemon with the ID creates a new pokemon.",
                "produces": [
                    "application/json"
                ],
                "summary": "Update pokemon's data in the MongoDB based on given ID",
                "responses": {
                    "200": {
                        "description": "pokemon was updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pokemons.pokemon"
                        }
                    },
                    "400": {
                        "description": "object can't be parsed into JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "406": {
                        "description": "pokemon's id cannot be changed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing pokemon in the MongoDB by ID and gives a message. Pass values in json format. If there isn't pokemon with the ID gives a message.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete pokemon in the MongoDB based on given ID",
                "responses": {
                    "200": {
                        "description": "pokemon was deleted",
                        "schema": {
                            "$ref": "#/definitions/pokemons.pokemon"
                        }
                    },
                    "201": {
                        "description": "pokemon not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get all users from the MongoDB. Pass values in json format.",
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves all users from the MongoDB",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/users.user"
                            }
                        }
                    },
                    "400": {
                        "description": "object can't be parsed into JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Post a user to the MongoDB. If the database doesn't exist, create and insert a new value. Pass values in json format.",
                "produces": [
                    "application/json"
                ],
                "summary": "Post user to the MongoDB",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/users.user"
                        }
                    },
                    "400": {
                        "description": "object can't be parsed into JSON",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get a user from the MongoDB by given login. Pass values in json format. If there aren't any users with the login gives a message \"user not found\".",
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve user from the MongoDB based on given Login",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.user"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing user in the MongoDB by ID. Pass values in json format. If there isn't user with the ID creates a new user.",
                "produces": [
                    "application/json"
                ],
                "summary": "Update user's data in the MongoDB based on given ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.user"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing user in the MongoDB by login and gives a message. Pass values in json format. If there isn't user with the login gives a message.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete user in the MongoDB based on given login",
                "responses": {
                    "200": {
                        "description": "user was deleted",
                        "schema": {
                            "$ref": "#/definitions/users.user"
                        }
                    },
                    "201": {
                        "description": "user not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "pokemons.pokemon": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_legendary": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "users.user": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
