package main

import (
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"     // swagger embed files	"go.mongodb.org/mongo-driver/bson"
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware

	"example.com/pokemon-handbook/config"
	_ "example.com/pokemon-handbook/docs" // import docs generated by Swag CLI
	"example.com/pokemon-handbook/pokemons"
)

func init() {
	fmt.Println("This is init")

	config.Conf = config.ReadConfig()
}

// @title           Swagger Example API
// @version         1.0
// @description     This is a sample server celler server.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /api/v1

// @securityDefinitions.basic  BasicAuth
func main() {
	fmt.Println("This is main")

	router := gin.Default()

	authorized := router.Group("/", gin.BasicAuth(gin.Accounts{
		config.Conf.UserName:  config.Conf.Password,
		config.Conf.UserName1: config.Conf.Password1,
		config.Conf.UserName2: config.Conf.Password2,
		config.Conf.UserName3: config.Conf.Password3,
	}))

	authorized.POST("/pokemons", pokemons.PostPokemon)
	router.GET("/pokemons", pokemons.GetPokemons)
	router.GET("/pokemons/:id", pokemons.GetPokemonByID)
	authorized.PUT("/pokemons/:id", pokemons.UpdatePokemonByID)
	authorized.DELETE("/pokemons/:id", pokemons.DeletePokemonByID)
	router.DELETE("/pokemons", adminBasicAuth, pokemons.DeleteAllPokemons)

	// use ginSwagger middleware to serve the API docs
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	router.Run(config.Conf.URL)
}

func adminBasicAuth(c *gin.Context) {
	auth := strings.SplitN(c.Request.Header.Get("Authorization"), " ", 2)

	if len(auth) != 2 || auth[0] != "Basic" {
		respondWithError(401, "Unauthorized", c)
		return
	}

	payload, _ := base64.StdEncoding.DecodeString(auth[1])
	pair := strings.SplitN(string(payload), ":", 2)

	if len(pair) != 2 || !authenticateUser(pair[0], pair[1]) {
		respondWithError(401, "You have not rights", c)
		return
	}

	c.Next()
}

func authenticateUser(user, password string) bool {
	if user == config.Conf.UserName && password == config.Conf.Password {
		return true
	}
	return false
}

func respondWithError(code int, message string, c *gin.Context) {
	resp := map[string]string{"error": message}

	c.JSON(code, resp)
	c.Abort()
}
